/*
 *  IntelliJ IDEA plugin to support the Neos CMS.
 *  Copyright (C) 2016  Christian Vette
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.1.10"
}

apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'

version "$version.$buildNumber"

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
sourceSets {
    main.java.srcDirs += 'src/gen'
}

intellij {
    version ideaVersion
    pluginName 'neos-intellij-plugin'
    updateSinceUntilBuild false
    downloadSources Boolean.valueOf(downloadIdeaSources)
    alternativeIdePath '/opt/PhpStorm-145.258.2'
    type = 'IU'
    plugins = ['yaml']
}

idea {
    module {
        generatedSourceDirs += file('src/gen')
    }
}

lexerTask(project, 'FusionLexer', 'de/vette/idea/neos/lang/fusion/lexer')
parserTask(project, 'FusionParser', 'de/vette/idea/neos/lang/fusion/psi')

def lexerTask(project, lexerName, pkg) {
    tasks.create("generate${lexerName}", JavaExec) {
        def src = "$project.projectDir/src/main/grammars/${lexerName}.flex"
        def dst = "$project.projectDir/src/gen/$pkg"

        main = 'jflex.Main'
        classpath = files('lib/jflex/jflex-1.7.0-SNAPSHOT.jar')

        args = ['--skel', 'lib/jflex/idea-flex.skeleton',
                '-d', dst,
                src
        ]

        inputs.file file(src)
        outputs.dir file("$dst/_${lexerName}.java")
    }
}

def parserTask(project, parserName, pkg) {
    tasks.create("generate${parserName}", JavaExec) {
        def dstRoot = "$project.projectDir/src/gen"
        def src = "$project.projectDir/src/main/grammars/${parserName}.bnf"
        def dst = "$dstRoot/$pkg"
        doFirst {
            delete file(dst)
        }

        main = 'org.intellij.grammar.Main'
        classpath(configurations.compile + files('lib/grammar-kit.jar'))

        args = [dstRoot, file(src)]

        inputs.file file(src)
        outputs.dir fileTree(dir: dst, include: '**/*.java')
    }
}