{
    classHeader='copyrightHeader.java'

    generate=[tokenAccessors="no"]
    parserClass="de.vette.idea.neos.lang.fusion.parser.FusionParser"
    parserUtilClass="de.vette.idea.neos.lang.fusion.parser.FusionParserUtil"

    implements='de.vette.idea.neos.lang.fusion.psi.FusionCompositeElement'
    extends="de.vette.idea.neos.lang.fusion.psi.impl.FusionCompositeElementImpl"

    psiClassPrefix="Fusion"
    psiImplClassSuffix="Impl"
    psiPackage="de.vette.idea.neos.lang.fusion.psi"
    psiImplPackage="de.vette.idea.neos.lang.fusion.psi.impl"

    elementTypeHolderClass="de.vette.idea.neos.lang.fusion.psi.FusionTypes"
    elementTypeClass="de.vette.idea.neos.lang.fusion.psi.FusionElementType"
    tokenTypeClass="de.vette.idea.neos.lang.fusion.psi.FusionTokenType"
}

FusionFile ::= item_*
private item_ ::= namespace_declaration | include_declaration | property | SINGLE_LINE_COMMENT | C_STYLE_COMMENT | DOC_COMMENT

inner block ::= LEFT_BRACE [item_ *] RIGHT_BRACE {pin=1}

namespace_declaration ::= NAMESPACE_KEYWORD NAMESPACE_SEPARATOR NAMESPACE_ALIAS NAMESPACE_ALIAS_SEPARATOR PACKAGE_KEY {pin=1}
include_declaration ::= INCLUDE_KEYWORD INCLUDE_SEPARATOR (resource|INCLUDE_PATH) {pin=1}

resource ::= RESOURCE_KEYWORD RESOURCE_PATH {pin=1}

private property ::= (property_block|property_deletion|property_copy|property_assignment|prototype_inheritance)
private property_block ::= path block {pin=2}
private property_deletion ::= path UNSET_OPERATOR {pin=2}
private property_copy ::= path COPY_OPERATOR (VALUE_BOOLEAN|VALUE_NULL|VALUE_NUMBER|value_string_line|object_type) {pin=2}
private property_assignment ::= path ASSIGNMENT_OPERATOR (VALUE_BOOLEAN|VALUE_NULL|VALUE_NUMBER|value_string_line|expression|object_type) {pin=2}

prototype_inheritance ::= path PROTOTYPE_COPY_OPERATOR prototype_signature [block]

private object_type ::= (UNQUALIFIED_TYPE|namespaced_type) [block]
private namespaced_type ::= OBJECT_TYPE_NAMESPACE OBJECT_TYPE_SEPARATOR UNQUALIFIED_TYPE {pin=1}

path ::= [PATH_SEPARATOR] (PATH_PART|meta_property|prototype_signature|value_string_single_line) (PATH_SEPARATOR (PATH_PART|prototype_signature|meta_property))*

meta_property ::= META_PROPERTY_KEYWORD META_PROPERTY_NAME {pin=1}
prototype_signature ::= PROTOTYPE_KEYWORD LEFT_PAREN PROTOTYPE_NAME RIGHT_PAREN {pin=1}

value_string_line ::= VALUE_STRING_QUOTE (VALUE_STRING | CRLF | VALUE_STRING_ESCAPED_QUOTE)* VALUE_STRING_QUOTE {pin=1}
value_string_single_line ::= VALUE_STRING_QUOTE (VALUE_STRING | VALUE_STRING_ESCAPED_QUOTE)* VALUE_STRING_QUOTE {pin=1}
expression ::= EXPRESSION_KEYWORD EEL_LEFT_BRACE conditional_expression EEL_RIGHT_BRACE {pin=1}

offset_access ::= EEL_LEFT_BRACKET conditional_expression EEL_RIGHT_BRACKET
method_call ::= EEL_FUNCTION EEL_LEFT_PAREN [conditional_expression] (VALUE_SEPARATOR conditional_expression) * EEL_RIGHT_PAREN
object_path ::= (method_call|expression_identifier) (EEL_DOT (method_call|EEL_IDENTIFIER)|offset_access) *
term ::= VALUE_BOOLEAN !expression_identifier | VALUE_NUMBER | object_path | value_string_line
expression_identifier ::= EEL_IDENTIFIER

simple_expression ::= wrapped_expression | array_literal | object_literal | term | not_expression
wrapped_expression ::= EEL_LEFT_PAREN conditional_expression EEL_RIGHT_PAREN
not_expression ::= EEL_NEGATION_OPERATOR simple_expression
conditional_expression ::= disjunction [IF_KEYWORD conditional_expression IF_SEPARATOR conditional_expression]
disjunction ::= conjunction (EEL_BOOLEAN_OR conjunction) *
conjunction ::= comparison (EEL_BOOLEAN_AND comparison) *
comparison ::= sum_calculation [EEL_COMPARISON_OPERATOR sum_calculation]
sum_calculation ::= prod_calculation ((EEL_ADDITION_OPERATOR|EEL_SUBTRACTION_OPERATOR) prod_calculation) *
prod_calculation ::= simple_expression ((EEL_DIVISION_OPERATOR|EEL_MODULO_OPERATOR|EEL_MULTIPLICATION_OPERATOR) simple_expression) *
array_literal ::= EEL_LEFT_BRACKET [conditional_expression] (VALUE_SEPARATOR conditional_expression) * EEL_RIGHT_BRACKET
object_literal_property ::= (value_string_line|expression_identifier) ':' conditional_expression
object_literal ::= EEL_OBJECT_LEFT_BRACE [object_literal_property] (VALUE_SEPARATOR object_literal_property) * EEL_OBJECT_RIGHT_BRACE